1.1:
Zahlen aufteilen mit Modulo,
1.2:
Switch case
1.3:
abs(absolute value), sqrt

2.1:
const 2D array, modulo
2.2:
typedef struct, bool, ternary, scanf
2.3:
2D array
2.4:
for in for

3.3:
h. files
3.5:
32/64 Bit compile
typecast
sizeof

4.1:
fgets, check for "quit" string
4.2:
fgets, "quit" string, tolower, find string in string, char array Pointer
4.3:
calloc, realloc, free, scanf überprüfen, strcmp, fgets, array Pointer

5.2:
qsort, sort ascending, sort descending

6.1:
struct, 2D array, roboter hindernisse ausweichen

7.1:
Game, structs, return struct, array in funktion bearbeiten und ohne return speichern, pointer, switch case

8.1:
Kerzen, char to short, array in funktion bearbeiten und speichern, typedef struct

9.1:
typecast calloc, einfach verkettete Liste

10.1:
.h, binary search tree, 

11.1-3:
Bitmanipulationen, fseek

12.1:
Unix file perms
12.2:
typedef struct

13.1:
Bitmanipulation


Notes:
fopen:
  fp = fopen ("file.txt", "w+"); //r 
  r: read from existing file
  w: creates empty file for write, overwrites files
  a: append, file created if not exist
  r+: opens file for read+write, must exist
  w+: creates empty file for read and write
  a+: opens file for reading and appending
fgets:
  char line[60]
  if( fgets (line, 60, fp)!=NULL )
fprintf
  fprintf(fp, "%s %s %s %d", "We", "are", "in", 2012);
fputs
  fputs("This is c programming.", fp);
puts
  puts(str);
malloc
  ptr = (int*) malloc(100 * sizeof(int));
calloc //Initializes with 0
  ptr = (float*) calloc(25, sizeof(float));
realloc
  ptr = realloc(ptr, n * sizeof(int));
fseek
  fseek( fp, 7, SEEK_SET ); //SEEK_SET, SEEK_CUR, SEEK_END
  
